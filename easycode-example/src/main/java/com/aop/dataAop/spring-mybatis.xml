<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-3.1.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
      http://www.springframework.org/schema/aop
      http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 自动扫描 -->
    <!--<context:component-scan base-package="com.yeekit.admin.dao,com.yeekit.admin.service,com.yeekit.admin.common.dataanno.*"/>-->

    <!--使AspectJ注解起作用：自动为匹配的类生成代理对象-->
    <!--<aop:aspectj-autoproxy/>  &lt;!&ndash; 打开aop 注解 &ndash;&gt;-->
    <!--<aop:aspectj-autoproxy proxy-target-class="true"/>-->

    <!--<bean id="aspect"-->
          <!--class="com.yeekit.admin.common.dataanno.TestAnnotationAspect"/>-->


    <!-- 引入配置文件 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties"/>
    </bean>

    <import resource="classpath:/dataconf/data-ourtmx.xml" ></import>
    <import resource="classpath:/dataconf/data-cas.xml" ></import>

    <bean id="multipleDataSource" class="com.yeekit.admin.common.dataanno.MultipleDataSource">
        <property name="defaultTargetDataSource" ref="cas"/>
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="ourtmx" value-ref="ourtmx"/>
                <entry key="cas" value-ref="cas"/>
            </map>
        </property>
    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="multipleDataSource"/>
        <!-- 自动扫描mapping.xml文件 -->
        <!--<property name="mapperLocations" value="classpath:com.yeekit.admin.dao.**"></property>-->
        <!--<property name="mapperLocations" value="classpath:com/*.*"></property>-->
    </bean>

    <!--&lt;!&ndash; DAO接口所在包名，Spring会自动查找其下的类 &ndash;&gt;-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.yeekit.admin.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="multipleDataSource"/>
    </bean>


    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="delete*" propagation="REQUIRED" read-only="false" timeout="5"
                       rollback-for="com.wins.dsp.framework.exception.BasicException"
                       no-rollback-for="java.lang.RuntimeException"/>
            <tx:method name="insert*" propagation="REQUIRED" read-only="false" timeout="5"
                       rollback-for="com.wins.dsp.framework.exception.BasicException"/>
            <tx:method name="update*" propagation="REQUIRED" read-only="false" timeout="5"
                       rollback-for="com.wins.dsp.framework.exception.BasicException"/>
            <tx:method name="select*" propagation="SUPPORTS" timeout="15"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="pc" expression="execution(public * com.*.*(..))"/>
        <aop:advisor pointcut-ref="pc" advice-ref="txAdvice"/>
    </aop:config>
</beans>